[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to npi","title":"Contributing to npi","text":"Thanks considering contributing npi! ‚Äôs people like make rewarding create, maintain, improve package. npi open source project created maintained Frank Farach spare time.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to npi","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/CONTRIBUTING.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to npi","text":"several ways can contribute project, greatly appreciated. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"/CONTRIBUTING.html","id":"share-the-love","dir":"","previous_headings":"How you can contribute","what":"Share the love","title":"Contributing to npi","text":"Think npi useful? Let others discover , telling person, via Twitter blog post.","code":""},{"path":"/CONTRIBUTING.html","id":"ask-a-question","dir":"","previous_headings":"How you can contribute","what":"Ask a question","title":"Contributing to npi","text":"Using npi got stuck? Browse documentation issues see can find solution. Still stuck? Post question issue GitHub. ‚Äôll best address , questions often lead better documentation discovery bugs.","code":""},{"path":"/CONTRIBUTING.html","id":"propose-an-idea","dir":"","previous_headings":"How you can contribute","what":"Propose an idea","title":"Contributing to npi","text":"idea new npi feature? Take look issue list see isn‚Äôt included suggested yet. , suggest idea issue GitHub. can‚Äôt promise implement idea, helps : Explain detail work. Keep scope narrow possible. See want contribute code idea. ‚Äôre also welcome join discussion existing issue.","code":""},{"path":"/CONTRIBUTING.html","id":"report-a-bug","dir":"","previous_headings":"How you can contribute","what":"Report a bug","title":"Contributing to npi","text":"Using npi think ‚Äôve discovered bug? ‚Äôs annoying! Don‚Äôt let others experience report issue GitHub can fix . good bug report makes easier limited time work project, kindly include following report: operating system name version (e.g.¬†Mac OS 10.13.6) details local setup might helpful troubleshooting, output running sessionInfo() R console Detailed steps reproduce bug, preferably form minimum reproducible example","code":""},{"path":"/CONTRIBUTING.html","id":"improve-the-documentation","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation","title":"Contributing to npi","text":"Noticed typo? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"/CONTRIBUTING.html","id":"function-documentation","dir":"","previous_headings":"How you can contribute > Improve the documentation","what":"Function documentation","title":"Contributing to npi","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file name function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"/CONTRIBUTING.html","id":"contribute-code","dir":"","previous_headings":"How you can contribute","what":"Contribute code","title":"Contributing to npi","text":"Care fix bugs implement new functionality npi? Awesome! üëè look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"/CONTRIBUTING.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to npi","text":"Please follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream master. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). Check code devtools::check() aim 0 errors warnings. Commit push changes. Submit pull request. Additionally: npi follows tidyverse style detailed tidyverse style guide. Please lint code lintr::lint_file() prior committing. npi uses roxygen2 documentation. running devtools::document(), ensure ‚Äôve update roxygen2 latest version used @noRd functions exported.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Frank Farach Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/advanced-use.html","id":"note-on-npi-downloadable-files","dir":"Articles","previous_headings":"","what":"Note on NPI Downloadable Files","title":"Advanced Uses","text":"CMS regularly releases full NPI data files . recommend users download data file need work entire dataset. API npi_search() returns maximum 1,200 records. Also consider downloading entire data need work maximum. Data dissemination files zipped exceed 4GB upon decompression.","code":""},{"path":"/articles/advanced-use.html","id":"run-npi_search-on-multiple-search-terms","dir":"Articles","previous_headings":"","what":"Run npi_search() on multiple search terms","title":"Advanced Uses","text":"npi_search() enables search defined set query parameters. function designed search multiple values argument , example case multiple NPI numbers single function call. However, users can still serially execute searches multiple values single query parameter using npi combination purrr package. example , search multiple NPI numbers. single tibble returned record information corresponding matching records. purrr:map() function used apply npi_search() function element vector. Thereafter, dplyr::bind_rows() function used combine list dataframes together single dataframe. search multiple zip codes Los Angeles County. Consult R Data Science chapter iteration learn using purrr package. Alternatively, can use simple loop instead unfamiliar tidyverse approach.","code":"npis <- c(1992708929, 1831192848, 1699778688, 1111111111)  # Last element doesn't exist  out <- npis %>%    purrr::map(., ~ npi_search(number = .)) %>%    dplyr::bind_rows() #> 10 records requested #> Requesting records 0-10... #> 10 records requested #> Requesting records 0-10... #> 10 records requested #> Requesting records 0-10... #> 10 records requested #> Requesting records 0-10...  npi_summarize(out) #> # A tibble: 3 √ó 6 #>   npi        name                            enumeration‚Ä¶¬π prima‚Ä¶¬≤ phone prima‚Ä¶¬≥ #>   <chr>      <chr>                           <chr>         <chr>   <chr> <chr>   #> 1 1992708929 NOVAMED MANAGEMENT SERVICES LLC Organization  3200 D‚Ä¶ 404-‚Ä¶ Dentis‚Ä¶ #> 2 1831192848 MATTHEW JAFFE                   Individual    3672 M‚Ä¶ 770-‚Ä¶ Orthop‚Ä¶ #> 3 1699778688 STEVEN PARNES                   Individual    NA      770-‚Ä¶ Clinic‚Ä¶ #> # ‚Ä¶ with abbreviated variable names ¬π‚Äãenumeration_type, #> #   ¬≤‚Äãprimary_practice_address, ¬≥‚Äãprimary_taxonomy codes <- c(90210, 90211, 90212)  zip_3 <- codes %>%    purrr::map(., ~ npi_search(postal_code  = .)) %>%    dplyr::bind_rows()  #> 10 records requested #> Requesting records 0-10... #> 10 records requested #> Requesting records 0-10... #> 10 records requested #> Requesting records 0-10...  npi_flatten(zip_3) #> # A tibble: 86 √ó 47 #>    npi   basic‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ basic‚Ä¶‚Åπ #>    <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1063‚Ä¶ RICHARD ROGAL   A       PhD     NO      M       2006-0‚Ä¶ 2007-0‚Ä¶ A       #>  2 1063‚Ä¶ RICHARD ROGAL   A       PhD     NO      M       2006-0‚Ä¶ 2007-0‚Ä¶ A       #>  3 1063‚Ä¶ RICHARD ROGAL   A       PhD     NO      M       2006-0‚Ä¶ 2007-0‚Ä¶ A       #>  4 1063‚Ä¶ RICHARD ROGAL   A       PhD     NO      M       2006-0‚Ä¶ 2007-0‚Ä¶ A       #>  5 1063‚Ä¶ MINOO   MAHMOU‚Ä¶ NA      MD      YES     F       2019-0‚Ä¶ 2019-0‚Ä¶ A       #>  6 1063‚Ä¶ MINOO   MAHMOU‚Ä¶ NA      MD      YES     F       2019-0‚Ä¶ 2019-0‚Ä¶ A       #>  7 1093‚Ä¶ FRED    EMMANU‚Ä¶ FERAYD‚Ä¶ DDS     NO      M       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  8 1093‚Ä¶ FRED    EMMANU‚Ä¶ FERAYD‚Ä¶ DDS     NO      M       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  9 1104‚Ä¶ GILBERT KWONG   NA      D.D.S.  YES     M       2016-0‚Ä¶ 2016-0‚Ä¶ A       #> 10 1104‚Ä¶ GILBERT KWONG   NA      D.D.S.  YES     M       2016-0‚Ä¶ 2016-0‚Ä¶ A       #> # ‚Ä¶ with 76 more rows, 37 more variables: basic_name_prefix <chr>, #> #   basic_name_suffix <chr>, basic_organization_name <chr>, #> #   basic_organizational_subpart <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_telephone_number <chr>, #> #   basic_authorized_official_title_or_position <chr>, ‚Ä¶ npis <- c(1992708929, 1831192848, 1699778688, 1111111111)  # Last element doesn't exist combined_df  <- data.frame() for (i in npis) {   combined_df <- rbind(combined_df, npi_search(number = i)) } #> 10 records requested #> Requesting records 0-10... #> 10 records requested #> Requesting records 0-10... #> 10 records requested #> Requesting records 0-10... #> 10 records requested #> Requesting records 0-10...  npi_summarize(combined_df) #> # A tibble: 3 √ó 6 #>   npi        name                            enumeration‚Ä¶¬π prima‚Ä¶¬≤ phone prima‚Ä¶¬≥ #>   <chr>      <chr>                           <chr>         <chr>   <chr> <chr>   #> 1 1992708929 NOVAMED MANAGEMENT SERVICES LLC Organization  3200 D‚Ä¶ 404-‚Ä¶ Dentis‚Ä¶ #> 2 1831192848 MATTHEW JAFFE                   Individual    3672 M‚Ä¶ 770-‚Ä¶ Orthop‚Ä¶ #> 3 1699778688 STEVEN PARNES                   Individual    NA      770-‚Ä¶ Clinic‚Ä¶ #> # ‚Ä¶ with abbreviated variable names ¬π‚Äãenumeration_type, #> #   ¬≤‚Äãprimary_practice_address, ¬≥‚Äãprimary_taxonomy"},{"path":"/articles/npi.html","id":"search-registry","dir":"Articles","previous_headings":"","what":"Search registry","title":"Introduction to npi","text":"explore organizational providers primary locations New York City, use city argument npi_search(). nyc dataset finds 10 organizational providers primary locations New York City, since 10 default number records returned npi_search(). response tibble high-cardinality data organized list columns. search arguments function include number, enumeration_type, taxonomy_description, first_name, last_name, use_first_name_alias, organization_name, address_purpose, state, postal_code, country_code, limit. Additionally, one search argument can used . Visit function‚Äôs help page via ?npi_search installing loading package details.","code":"nyc <- npi_search(city = \"New York City\") #> 10 records requested #> Requesting records 0-10... nyc #> # A tibble: 10 √ó 11 #>    npi    enume‚Ä¶¬π basic    other_‚Ä¶¬≤ identi‚Ä¶¬≥ taxono‚Ä¶‚Å¥ addres‚Ä¶‚Åµ practi‚Ä¶‚Å∂ endpoi‚Ä¶‚Å∑ #>  * <chr>  <chr>   <list>   <list>   <list>   <list>   <list>   <list>   <list>   #>  1 13262‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  2 13564‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  3 14972‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  4 19728‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  5 14079‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  6 13665‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  7 18516‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  8 16594‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  9 16695‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 10 10938‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # ‚Ä¶ with 2 more variables: created_date <dttm>, last_updated_date <dttm>, and #> #   abbreviated variable names ¬π‚Äãenumeration_type, ¬≤‚Äãother_names, ¬≥‚Äãidentifiers, #> #   ‚Å¥‚Äãtaxonomies, ‚Åµ‚Äãaddresses, ‚Å∂‚Äãpractice_locations, ‚Å∑‚Äãendpoints nyc_multi <- npi_search(city = \"New York City\", state = \"NY\", enumeration_type = \"org\") #> 10 records requested #> Requesting records 0-10... nyc_multi #> # A tibble: 10 √ó 11 #>    npi    enume‚Ä¶¬π basic    other_‚Ä¶¬≤ identi‚Ä¶¬≥ taxono‚Ä¶‚Å¥ addres‚Ä¶‚Åµ practi‚Ä¶‚Å∂ endpoi‚Ä¶‚Å∑ #>  * <chr>  <chr>   <list>   <list>   <list>   <list>   <list>   <list>   <list>   #>  1 19728‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  2 15886‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  3 16292‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  4 15383‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  5 10637‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  6 12354‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  7 12452‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  8 12353‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  9 11849‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 10 16799‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # ‚Ä¶ with 2 more variables: created_date <dttm>, last_updated_date <dttm>, and #> #   abbreviated variable names ¬π‚Äãenumeration_type, ¬≤‚Äãother_names, ¬≥‚Äãidentifiers, #> #   ‚Å¥‚Äãtaxonomies, ‚Åµ‚Äãaddresses, ‚Å∂‚Äãpractice_locations, ‚Å∑‚Äãendpoints"},{"path":"/articles/npi.html","id":"increasing-number-of-records-returned","dir":"Articles","previous_headings":"","what":"Increasing number of records returned","title":"Introduction to npi","text":"limit argument npi_search() lets set maximum records return 1 1200 inclusive, defaulting 10 records value specified. using npi_search(), searches greater 200 records (example 300 records) may result multiple API calls. API returns 200 records per request, allows previously requested records skipped. npi_search() automatically make additional API calls API‚Äôs limit 1200 records unique set query parameter values, still return single tibble. However, save time, function makes additional requests needed. example, request 1200 records, 199 returned first request, function need make second request records return. NPPES API documentation specify additional API rate limitations. However, need 1200 NPI records set search terms, need download NPPES Data Dissemination File.","code":"nyc_25 <- npi_search(city = \"New York City\", limit = 25) #> 25 records requested #> Requesting records 0-25... nyc_25 #> # A tibble: 25 √ó 11 #>    npi    enume‚Ä¶¬π basic    other_‚Ä¶¬≤ identi‚Ä¶¬≥ taxono‚Ä¶‚Å¥ addres‚Ä¶‚Åµ practi‚Ä¶‚Å∂ endpoi‚Ä¶‚Å∑ #>  * <chr>  <chr>   <list>   <list>   <list>   <list>   <list>   <list>   <list>   #>  1 13262‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  2 13564‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  3 14972‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  4 19728‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  5 14079‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  6 13665‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  7 18516‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  8 16594‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  9 16695‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 10 10938‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # ‚Ä¶ with 15 more rows, 2 more variables: created_date <dttm>, #> #   last_updated_date <dttm>, and abbreviated variable names ¬π‚Äãenumeration_type, #> #   ¬≤‚Äãother_names, ¬≥‚Äãidentifiers, ‚Å¥‚Äãtaxonomies, ‚Åµ‚Äãaddresses, ‚Å∂‚Äãpractice_locations, #> #   ‚Å∑‚Äãendpoints nyc_300 <- npi_search(city = \"New York City\", limit = 300) #> 300 records requested #> Requesting records 0-200... #> Requesting records 200-300... nyc_300 #> # A tibble: 300 √ó 11 #>    npi    enume‚Ä¶¬π basic    other_‚Ä¶¬≤ identi‚Ä¶¬≥ taxono‚Ä¶‚Å¥ addres‚Ä¶‚Åµ practi‚Ä¶‚Å∂ endpoi‚Ä¶‚Å∑ #>  * <chr>  <chr>   <list>   <list>   <list>   <list>   <list>   <list>   <list>   #>  1 13262‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  2 13564‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  3 14972‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  4 19728‚Ä¶ Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  5 14079‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  6 13665‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  7 18516‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  8 16594‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  9 16695‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 10 10938‚Ä¶ Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # ‚Ä¶ with 290 more rows, 2 more variables: created_date <dttm>, #> #   last_updated_date <dttm>, and abbreviated variable names ¬π‚Äãenumeration_type, #> #   ¬≤‚Äãother_names, ¬≥‚Äãidentifiers, ‚Å¥‚Äãtaxonomies, ‚Åµ‚Äãaddresses, ‚Å∂‚Äãpractice_locations, #> #   ‚Å∑‚Äãendpoints"},{"path":"/articles/npi.html","id":"obtaining-more-human-readable-output","dir":"Articles","previous_headings":"","what":"Obtaining more human-readable output","title":"Introduction to npi","text":"npi_summarize() provides human-readable overview output already obtained npi_search(). Additionally, users can flatten list columns using npi_flatten(). Alternatively, individual columns can flattened npi using cols argument. columns specified flattened returned npi column default.","code":"npi_summarize(nyc) #> # A tibble: 10 √ó 6 #>    npi        name               enumeration_type primary_practi‚Ä¶¬π phone prima‚Ä¶¬≤ #>    <chr>      <chr>              <chr>            <chr>            <chr> <chr>   #>  1 1326214693 BENJAMIN BOWLING   Individual       NA               212-‚Ä¶ Psychi‚Ä¶ #>  2 1356498703 MICHAEL SCHMIDT    Individual       4401 BRONX BOUL‚Ä¶ 718-‚Ä¶ Intern‚Ä¶ #>  3 1497228076 VIVIAN AYALA       Individual       NA               212-‚Ä¶ Social‚Ä¶ #>  4 1972840189 BEVERLY SUAREZ LLC Organization     220-18 HORACE H‚Ä¶ 718-‚Ä¶ Psychi‚Ä¶ #>  5 1407906092 MELINDA SCHROEDER  Individual       NA               212-‚Ä¶ Social‚Ä¶ #>  6 1366591505 ANNE GRIFFIN       Individual       205 EAST 78TH S‚Ä¶ 212-‚Ä¶ Social‚Ä¶ #>  7 1851622625 TOD GRAPES         Individual       169 MANHATTAN A‚Ä¶ 212-‚Ä¶ Social‚Ä¶ #>  8 1659422525 ELLEN FEINSTEIN    Individual       441 W END AVE S‚Ä¶ 212-‚Ä¶ Intern‚Ä¶ #>  9 1669524237 LEE SHECHTMAN      Individual       247 3RD AVE SUI‚Ä¶ 212-‚Ä¶ Kinesi‚Ä¶ #> 10 1093868499 BENJAMIN SADOCK    Individual       NA               212-‚Ä¶ Day Tr‚Ä¶ #> # ‚Ä¶ with abbreviated variable names ¬π‚Äãprimary_practice_address, #> #   ¬≤‚Äãprimary_taxonomy npi_flatten(nyc) #> # A tibble: 30 √ó 48 #>    npi   basic‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ basic‚Ä¶‚Åπ #>    <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1093‚Ä¶ BENJAM‚Ä¶ SADOCK  JAMES   MD      NO      M       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  2 1093‚Ä¶ BENJAM‚Ä¶ SADOCK  JAMES   MD      NO      M       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  3 1326‚Ä¶ BENJAM‚Ä¶ BOWLING DOUGLAS M.D.    NO      M       2008-0‚Ä¶ 2014-0‚Ä¶ A       #>  4 1326‚Ä¶ BENJAM‚Ä¶ BOWLING DOUGLAS M.D.    NO      M       2008-0‚Ä¶ 2014-0‚Ä¶ A       #>  5 1356‚Ä¶ MICHAEL SCHMIDT THOMAS  MSW LC‚Ä¶ NO      M       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  6 1356‚Ä¶ MICHAEL SCHMIDT THOMAS  MSW LC‚Ä¶ NO      M       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  7 1366‚Ä¶ ANNE    GRIFFIN MCLEAN  MD      NO      F       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  8 1366‚Ä¶ ANNE    GRIFFIN MCLEAN  MD      NO      F       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  9 1407‚Ä¶ MELINDA SCHROE‚Ä¶ LUCY    LCSW    NO      F       2007-0‚Ä¶ 2007-0‚Ä¶ A       #> 10 1407‚Ä¶ MELINDA SCHROE‚Ä¶ LUCY    LCSW    NO      F       2007-0‚Ä¶ 2007-0‚Ä¶ A       #> # ‚Ä¶ with 20 more rows, 38 more variables: basic_name_prefix <chr>, #> #   basic_name_suffix <chr>, basic_organization_name <chr>, #> #   basic_organizational_subpart <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_middle_name <chr>, #> #   basic_authorized_official_telephone_number <chr>, ‚Ä¶ npi_flatten(nyc, cols = c(\"basic\", \"taxonomies\")) #> # A tibble: 10 √ó 26 #>    npi   basic‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ basic‚Ä¶‚Åπ #>    <chr> <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1093‚Ä¶ BENJAM‚Ä¶ SADOCK  JAMES   MD      NO      M       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  2 1326‚Ä¶ BENJAM‚Ä¶ BOWLING DOUGLAS M.D.    NO      M       2008-0‚Ä¶ 2014-0‚Ä¶ A       #>  3 1356‚Ä¶ MICHAEL SCHMIDT THOMAS  MSW LC‚Ä¶ NO      M       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  4 1366‚Ä¶ ANNE    GRIFFIN MCLEAN  MD      NO      F       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  5 1407‚Ä¶ MELINDA SCHROE‚Ä¶ LUCY    LCSW    NO      F       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  6 1497‚Ä¶ VIVIAN  AYALA   ROSE    NA      NO      F       2019-0‚Ä¶ 2019-0‚Ä¶ A       #>  7 1659‚Ä¶ ELLEN   FEINST‚Ä¶ MARCH   CSW     YES     F       2007-0‚Ä¶ 2007-0‚Ä¶ A       #>  8 1669‚Ä¶ LEE     SHECHT‚Ä¶ NA      M.D.    YES     M       2007-0‚Ä¶ 2012-0‚Ä¶ A       #>  9 1851‚Ä¶ TOD     GRAPES  T       B.S. e‚Ä¶ YES     M       2010-0‚Ä¶ 2010-0‚Ä¶ A       #> 10 1972‚Ä¶ NA      NA      NA      NA      NA      NA      2013-0‚Ä¶ 2013-0‚Ä¶ A       #> # ‚Ä¶ with 16 more variables: basic_name_prefix <chr>, basic_name_suffix <chr>, #> #   basic_organization_name <chr>, basic_organizational_subpart <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_middle_name <chr>, #> #   basic_authorized_official_telephone_number <chr>, #> #   basic_authorized_official_title_or_position <chr>, ‚Ä¶"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Frank Farach. Maintainer, author, copyright holder. Sam Parmar. Contributor. Matthias Greni√©. Reviewer. Emily C. Zabor. Reviewer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Farach, F. J. (2022). npi: Access U.S. National Provider Identifier Registry API (Version 0.2.0). https://github.com/ropensci/npi Farach F (2022). npi: Access U.S. National Provider Identifier Registry API. doi:10.5281/zenodo.6326729, R package version 0.2.0, https://github.com/ropensci/npi.","code":"@Manual{,   title = {npi: Access the U.S. National Provider Identifier Registry API (Version 0.2.0)},   author = {Frank J Farach},   year = {2022},   url = {https://github.com/ropensci/npi},   doi = {10.5281/zenodo.6326729}, } @Manual{,   title = {{npi}: Access the U.S. National Provider Identifier Registry API},   author = {Frank Farach},   url = {https://github.com/ropensci/npi},   year = {2022},   doi = {10.5281/zenodo.6326729},   note = {R package version 0.2.0}, }"},{"path":"/index.html","id":"npi-","dir":"","previous_headings":"","what":"Access the U.S. National Provider Identifier Registry API","title":"Access the U.S. National Provider Identifier Registry API","text":"Access U.S. National Provider Identifier Registry API Use R access U.S. National Provider Identifier (NPI) Registry API (v2.1) Center Medicare Medicaid Services (CMS): https://npiregistry.cms.hhs.gov/. Obtain rich administrative data linked specific individual organizational healthcare provider, perform advanced searches based provider name, location, type service, credentials, many attributes. npi provides convenience functions data extraction can spend less time wrangling data time putting data work. Analysts working healthcare public health data frequently need join data multiple sources answer business research questions. Unfortunately, joining data healthcare hard entities unique, consistent identifiers across organizational boundaries. NPI numbers, however, suffer limitations, U.S. providers meeting certain common criteria must NPI number order reimbursed services provide. makes NPI numbers incredibly useful joining multiple datasets provider, primary motivation developing package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Access the U.S. National Provider Identifier Registry API","text":"three ways install npi package: Install CRAN: Install R-universe: Install GitHub using devtools package:","code":"install.packages(\"npi\") library(npi) install.packages(\"npi\", repos = \"https://ropensci.r-universe.dev\") library(npi) devtools::install_github(\"ropensci/npi\") library(npi)"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Access the U.S. National Provider Identifier Registry API","text":"npi exports four functions, match pattern ‚Äúnpi_*‚Äú: npi_search(): Search NPI Registry return response tibble high-cardinality data organized list columns. npi_summarize(): method displaying nice overview results npi_search(). npi_flatten(): method flattening one list columns search result, joined NPI number. npi_is_valid(): Check validity one NPI numbers using official NPI enumeration standard.","code":""},{"path":"/index.html","id":"search-the-registry","dir":"","previous_headings":"Usage","what":"Search the registry","title":"Access the U.S. National Provider Identifier Registry API","text":"npi_search() exposes nearly NPPES API‚Äôs search parameters. Let‚Äôs say wanted find 10 providers primary locations New York City: full search results four regular vector columns, npi, enumeration_type, created_date, last_updated_date seven list columns. list column collection related data: basic: Basic profile information provider other_names: names used provider identifiers: provider identifiers credential information taxonomies: Service classification license information addresses: Location mailing address information practice_locations: Provider‚Äôs practice locations endpoints: Details provider‚Äôs endpoints health information exchange full list possible fields within list columns can found NPPES API Help page. ‚Äôre comfortable working list columns, may need package. However, npi also provides functions can help summarize transform search results.","code":"nyc <- npi_search(city = \"New York City\") # Your results may differ since the data in the NPPES database changes over time nyc #> # A tibble: 10 √ó 11 #>       npi enume‚Ä¶¬π basic    other_‚Ä¶¬≤ identi‚Ä¶¬≥ taxono‚Ä¶‚Å¥ addres‚Ä¶‚Åµ practi‚Ä¶‚Å∂ endpoi‚Ä¶‚Å∑ #>  *  <int> <chr>   <list>   <list>   <list>   <list>   <list>   <list>   <list>   #>  1 1.19e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  2 1.31e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  3 1.64e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  4 1.35e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  5 1.56e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  6 1.79e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  7 1.56e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  8 1.96e9 Organi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #>  9 1.43e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> 10 1.33e9 Indivi‚Ä¶ <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> <tibble> #> # ‚Ä¶ with 2 more variables: created_date <dttm>, last_updated_date <dttm>, and #> #   abbreviated variable names ¬π‚Äãenumeration_type, ¬≤‚Äãother_names, ¬≥‚Äãidentifiers, #> #   ‚Å¥‚Äãtaxonomies, ‚Åµ‚Äãaddresses, ‚Å∂‚Äãpractice_locations, ‚Å∑‚Äãendpoints"},{"path":"/index.html","id":"working-with-search-results","dir":"","previous_headings":"","what":"Working with search results","title":"Access the U.S. National Provider Identifier Registry API","text":"npi two main helper functions working search results: npi_summarize() npi_flatten().","code":""},{"path":"/index.html","id":"summarizing-results","dir":"","previous_headings":"Working with search results","what":"Summarizing results","title":"Access the U.S. National Provider Identifier Registry API","text":"Run npi_summarize() results see human-readable overview search results. Specifically, function returns NPI number, provider‚Äôs name, enumeration type (individual organizational provider), primary address, phone number, primary taxonomy (area practice):","code":"npi_summarize(nyc) #> # A tibble: 10 √ó 6 #>           npi name                                 enume‚Ä¶¬π prima‚Ä¶¬≤ phone prima‚Ä¶¬≥ #>         <int> <chr>                                <chr>   <chr>   <chr> <chr>   #>  1 1194276360 ALYSSA COWNAN                        Indivi‚Ä¶ 5 E 98‚Ä¶ 212-‚Ä¶ Physic‚Ä¶ #>  2 1306849641 MARK MOHRMANN                        Indivi‚Ä¶ 16 PAR‚Ä¶ 212-‚Ä¶ Orthop‚Ä¶ #>  3 1639173065 SAKSHI DUA                           Indivi‚Ä¶ 10 E 1‚Ä¶ 212-‚Ä¶ Nurse ‚Ä¶ #>  4 1346604592 SARAH LOWRY                          Indivi‚Ä¶ 1335 D‚Ä¶ 614-‚Ä¶ Occupa‚Ä¶ #>  5 1558362566 AMY TIERSTEN                         Indivi‚Ä¶ 1176 5‚Ä¶ 212-‚Ä¶ Psychi‚Ä¶ #>  6 1790786416 NOAH GOLDMAN                         Indivi‚Ä¶ 140 BE‚Ä¶ 973-‚Ä¶ Intern‚Ä¶ #>  7 1558713628 ROBYN NOHLING                        Indivi‚Ä¶ 9 HOPE‚Ä¶ 781-‚Ä¶ Nurse ‚Ä¶ #>  8 1962983775 LENOX HILL MEDICAL ANESTHESIOLOGY, ‚Ä¶ Organi‚Ä¶ 100 E ‚Ä¶ 212-‚Ä¶ Intern‚Ä¶ #>  9 1427454529 YONGHONG TAN                         Indivi‚Ä¶ 34 MAP‚Ä¶ 203-‚Ä¶ Obstet‚Ä¶ #> 10 1326403213 RAJEE KRAUSE                         Indivi‚Ä¶ 12401 ‚Ä¶ 347-‚Ä¶ Nurse ‚Ä¶ #> # ‚Ä¶ with abbreviated variable names ¬π‚Äãenumeration_type, #> #   ¬≤‚Äãprimary_practice_address, ¬≥‚Äãprimary_taxonomy"},{"path":"/index.html","id":"flattening-results","dir":"","previous_headings":"Working with search results","what":"Flattening results","title":"Access the U.S. National Provider Identifier Registry API","text":"seen , data frame returned npi_search() nested structure. Although data single row relates one NPI, list column contains list one values corresponding NPI row. example, provider‚Äôs NPI record may multiple associated addresses, phone numbers, taxonomies, attributes, live row data frame. nested structures can little tricky work , npi includes npi_flatten(), function transforms data frame flatter (.e., unnested merged) structure ‚Äôs easier use. npi_flatten() performs following transformations: unnest list columns prefix name unnested column name original list column left-join data together NPI npi_flatten() supports variety approaches flattening results npi_search(). One extreme flatten everything : However, due number fields large number potential combinations values, approach best suited small datasets. likely, ‚Äôll want flatten small number list columns original data frame one pass, repeating process list columns want merging fact. example, flatten basic provider provider taxonomy information, supply corresponding list columns vector names cols argument:","code":"npi_flatten(nyc) #> # A tibble: 48 √ó 42 #>           npi basic_fi‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ #>         <int> <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  2 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  3 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  4 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  5 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  6 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  7 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  8 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  9 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #> 10 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #> # ‚Ä¶ with 38 more rows, 33 more variables: basic_name <chr>, #> #   basic_name_prefix <chr>, basic_middle_name <chr>, #> #   basic_organization_name <chr>, basic_organizational_subpart <chr>, #> #   basic_authorized_official_credential <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_middle_name <chr>, ‚Ä¶ # Flatten basic provider info and provider taxonomy, preserving the relationship # of each to NPI number and discarding other list columns. npi_flatten(nyc, cols = c(\"basic\", \"taxonomies\")) #> # A tibble: 20 √ó 26 #>           npi basic_fi‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ #>         <int> <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  2 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  3 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  4 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  5 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  6 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  7 1346604592 SARAH      LOWRY   OTR/L   YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #>  8 1346604592 SARAH      LOWRY   OTR/L   YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #>  9 1427454529 YONGHONG   TAN     <NA>    NO      F       2014-1‚Ä¶ 2018-1‚Ä¶ A       #> 10 1558362566 AMY        TIERST‚Ä¶ M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #> 11 1558713628 ROBYN      NOHLING FNP-BC‚Ä¶ YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #> 12 1558713628 ROBYN      NOHLING FNP-BC‚Ä¶ YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #> 13 1558713628 ROBYN      NOHLING FNP-BC‚Ä¶ YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #> 14 1558713628 ROBYN      NOHLING FNP-BC‚Ä¶ YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #> 15 1558713628 ROBYN      NOHLING FNP-BC‚Ä¶ YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #> 16 1558713628 ROBYN      NOHLING FNP-BC‚Ä¶ YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #> 17 1639173065 SAKSHI     DUA     M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #> 18 1639173065 SAKSHI     DUA     M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #> 19 1790786416 NOAH       GOLDMAN M.D.    NO      M       2005-0‚Ä¶ 2018-0‚Ä¶ A       #> 20 1962983775 <NA>       <NA>    <NA>    <NA>    <NA>    2018-0‚Ä¶ 2018-0‚Ä¶ A       #> # ‚Ä¶ with 17 more variables: basic_name <chr>, basic_name_prefix <chr>, #> #   basic_middle_name <chr>, basic_organization_name <chr>, #> #   basic_organizational_subpart <chr>, #> #   basic_authorized_official_credential <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_middle_name <chr>, ‚Ä¶"},{"path":"/index.html","id":"validating-npis","dir":"","previous_headings":"Working with search results","what":"Validating NPIs","title":"Access the U.S. National Provider Identifier Registry API","text":"Just like credit card numbers, NPI numbers can mistyped corrupted transit. Likewise, officially-issued NPI numbers check digit error-checking purposes. Use npi_is_valid() check whether NPI number ‚Äôve encountered validly constructed: Note function doesn‚Äôt check whether NPI numbers activated deactivated (see #22). merely checks number‚Äôs consistency NPI specification. , can help detect handle data quality issues early.","code":"# Validate NPIs npi_is_valid(1234567893) #> [1] TRUE npi_is_valid(1234567898) #> [1] FALSE"},{"path":"/index.html","id":"set-your-own-user-agent","dir":"","previous_headings":"","what":"Set your own user agent","title":"Access the U.S. National Provider Identifier Registry API","text":"user agent way software interacting API tell making request. helps API‚Äôs maintainers understand systems using API. default, npi makes request NPPES API, request header references name package URL repository (e.g., ‚Äònpi/0.2.0 (https://github.com/ropensci/npi)‚Äô). want set custom user agent, update value npi_user_agent option. example, version 1.0.0 app called ‚Äúmy_app‚Äù, run following code:","code":"options(npi_user_agent = \"my_app/1.0.0\")"},{"path":"/index.html","id":"package-website","dir":"","previous_headings":"","what":"Package Website","title":"Access the U.S. National Provider Identifier Registry API","text":"npi website release notes, documentation user functions, examples showing package can used.","code":""},{"path":"/index.html","id":"reporting-bugs","dir":"","previous_headings":"","what":"Reporting Bugs","title":"Access the U.S. National Provider Identifier Registry API","text":"spot bug? ‚Äôd love hear issues page.","code":""},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Access the U.S. National Provider Identifier Registry API","text":"Please note package released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Access the U.S. National Provider Identifier Registry API","text":"Interested learning can contribute npi? Head contributor guide‚Äîthanks considering!","code":""},{"path":"/index.html","id":"how-to-cite-this-package","dir":"","previous_headings":"","what":"How to cite this package","title":"Access the U.S. National Provider Identifier Registry API","text":"latest citation, see Authors Citation page package website.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Access the U.S. National Provider Identifier Registry API","text":"MIT (c) Frank Farach package‚Äôs logo licensed CC -SA 4.0 co-created Frank Farach Sam Parmar. logo uses modified version image Rod Asclepius magnifying glass attributed Evanherk, GFDL.","code":""},{"path":"/reference/new_npi_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an npi_results S3 object ‚Äî new_npi_results","title":"Construct an npi_results S3 object ‚Äî new_npi_results","text":"Creates npi_results S3 object tibble. See   validate_npi_results requirements class.","code":""},{"path":"/reference/new_npi_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an npi_results S3 object ‚Äî new_npi_results","text":"","code":"new_npi_results(x, ...)"},{"path":"/reference/new_npi_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an npi_results S3 object ‚Äî new_npi_results","text":"x tibble","code":""},{"path":"/reference/new_npi_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an npi_results S3 object ‚Äî new_npi_results","text":"tibble S3 class npi_results","code":""},{"path":"/reference/npi-package.html","id":null,"dir":"Reference","previous_headings":"","what":"npi: Access the U.S. National Provider Identifier Registry API ‚Äî npi-package","title":"npi: Access the U.S. National Provider Identifier Registry API ‚Äî npi-package","text":"Access United States National Provider Identifier Registry API https://npiregistry.cms.hhs.gov/api/. Obtain transform administrative data linked specific individual organizational healthcare provider, perform advanced searches based provider name, location, type service, credentials, attributes exposed API.","code":""},{"path":"/reference/npi-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"npi: Access the U.S. National Provider Identifier Registry API ‚Äî npi-package","text":"npi makes easy search work data U.S. National Provider Identifier (NPI) Registry API (v2.1) directly R. Obtain rich administrative data linked specific individual organizational healthcare provider, perform advanced searches based provider name, location, type service, credentials, many attributes. npi provides convenience functions data extraction can spend less time wrangling data time putting data work. three functions likely need package. first npi_search, allows query NPI Registry returns 1,200 full NPI records data frame (tibble). Next, can use npi_summarize results obtain human-readable summary record. Finally, npi_flatten extracts flattens conceptually-related subsets data tibble joined `npi` column analysis-ready object.","code":""},{"path":"/reference/npi-package.html","id":"package-options","dir":"Reference","previous_headings":"","what":"Package options","title":"npi: Access the U.S. National Provider Identifier Registry API ‚Äî npi-package","text":"npi's default user agent URL package's GitHub   repository, https://github.com/ropensci/npi. can customize   setting npi_user_agent option: options(npi_user_agent = \"your_user_agent_here\")","code":""},{"path":[]},{"path":"/reference/npi-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"npi: Access the U.S. National Provider Identifier Registry API ‚Äî npi-package","text":"Maintainer: Frank Farach frank.farach@gmail.com (ORCID) [copyright holder] contributors: Sam Parmar parmartsam@gmail.com [contributor] Matthias Greni√© matthias.grenie@idiv.de (ORCID) [reviewer] Emily C. Zabor zabore2@ccf.org (ORCID) [reviewer]","code":""},{"path":"/reference/npi_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method to flatten an npi_results object ‚Äî npi_flatten","title":"S3 method to flatten an npi_results object ‚Äî npi_flatten","text":"S3 method flatten npi_results object","code":""},{"path":"/reference/npi_flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method to flatten an npi_results object ‚Äî npi_flatten","text":"","code":"npi_flatten(df, cols, key)"},{"path":"/reference/npi_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method to flatten an npi_results object ‚Äî npi_flatten","text":"df data frame containing results call npi_search. cols non-NULL, named columns specified flattened returned along npi. key quoted column name df use matching key. default value \"npi\".","code":""},{"path":"/reference/npi_flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method to flatten an npi_results object ‚Äî npi_flatten","text":"data frame (tibble) flattened list columns.","code":""},{"path":"/reference/npi_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method to flatten an npi_results object ‚Äî npi_flatten","text":"","code":"# Flatten all list columns data(npis) npi_flatten(npis) #> # A tibble: 48 √ó 42 #>           npi basic_fi‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ #>         <int> <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  2 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  3 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  4 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  5 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  6 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  7 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  8 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  9 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #> 10 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #> # ‚Ä¶ with 38 more rows, 33 more variables: basic_name <chr>, #> #   basic_name_prefix <chr>, basic_middle_name <chr>, #> #   basic_organization_name <chr>, basic_organizational_subpart <chr>, #> #   basic_authorized_official_credential <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_middle_name <chr>, ‚Ä¶  # Only flatten specified columns npi_flatten(npis, cols = c(\"basic\", \"identifiers\")) #> # A tibble: 12 √ó 25 #>           npi basic_fi‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ #>         <int> <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  2 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  3 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  4 1346604592 SARAH      LOWRY   OTR/L   YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #>  5 1427454529 YONGHONG   TAN     NA      NO      F       2014-1‚Ä¶ 2018-1‚Ä¶ A       #>  6 1558362566 AMY        TIERST‚Ä¶ M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  7 1558713628 ROBYN      NOHLING FNP-BC‚Ä¶ YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #>  8 1639173065 SAKSHI     DUA     M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  9 1639173065 SAKSHI     DUA     M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #> 10 1639173065 SAKSHI     DUA     M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #> 11 1790786416 NOAH       GOLDMAN M.D.    NO      M       2005-0‚Ä¶ 2018-0‚Ä¶ A       #> 12 1962983775 NA         NA      NA      NA      NA      2018-0‚Ä¶ 2018-0‚Ä¶ A       #> # ‚Ä¶ with 16 more variables: basic_name <chr>, basic_name_prefix <chr>, #> #   basic_middle_name <chr>, basic_organization_name <chr>, #> #   basic_organizational_subpart <chr>, #> #   basic_authorized_official_credential <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_middle_name <chr>, ‚Ä¶"},{"path":"/reference/npi_flatten.npi_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten NPI search results ‚Äî npi_flatten.npi_results","title":"Flatten NPI search results ‚Äî npi_flatten.npi_results","text":"function takes npi_results S3 object returned npi_search flattens list columns. unnests lists columns left joins npi. can optionally specify columns df include.","code":""},{"path":"/reference/npi_flatten.npi_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten NPI search results ‚Äî npi_flatten.npi_results","text":"","code":"# S3 method for npi_results npi_flatten(df, cols = NULL, key = \"npi\")"},{"path":"/reference/npi_flatten.npi_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten NPI search results ‚Äî npi_flatten.npi_results","text":"df data frame containing results call npi_search. cols non-NULL, named columns specified flattened returned along npi. key quoted column name df use matching key. default value \"npi\".","code":""},{"path":"/reference/npi_flatten.npi_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten NPI search results ‚Äî npi_flatten.npi_results","text":"data frame (tibble) flattened list columns.","code":""},{"path":"/reference/npi_flatten.npi_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flatten NPI search results ‚Äî npi_flatten.npi_results","text":"names unnested columns prefixed name originating list column avoid name clashes show lineage. List columns containing NULL data absent result columns unnest.","code":""},{"path":"/reference/npi_flatten.npi_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten NPI search results ‚Äî npi_flatten.npi_results","text":"","code":"# Flatten all list columns data(npis) npi_flatten(npis) #> # A tibble: 48 √ó 42 #>           npi basic_fi‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ #>         <int> <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  2 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  3 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  4 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  5 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  6 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  7 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  8 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  9 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #> 10 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #> # ‚Ä¶ with 38 more rows, 33 more variables: basic_name <chr>, #> #   basic_name_prefix <chr>, basic_middle_name <chr>, #> #   basic_organization_name <chr>, basic_organizational_subpart <chr>, #> #   basic_authorized_official_credential <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_middle_name <chr>, ‚Ä¶  # Only flatten specified columns npi_flatten(npis, cols = c(\"basic\", \"identifiers\")) #> # A tibble: 12 √ó 25 #>           npi basic_fi‚Ä¶¬π basic‚Ä¶¬≤ basic‚Ä¶¬≥ basic‚Ä¶‚Å¥ basic‚Ä¶‚Åµ basic‚Ä¶‚Å∂ basic‚Ä¶‚Å∑ basic‚Ä¶‚Å∏ #>         <int> <chr>      <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   <chr>   #>  1 1194276360 ALYSSA     COWNAN  PA      NO      F       2016-1‚Ä¶ 2018-0‚Ä¶ A       #>  2 1306849641 MARK       MOHRMA‚Ä¶ MD      NO      M       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  3 1326403213 RAJEE      KRAUSE  AGPCNP‚Ä¶ NO      F       2015-1‚Ä¶ 2019-0‚Ä¶ A       #>  4 1346604592 SARAH      LOWRY   OTR/L   YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #>  5 1427454529 YONGHONG   TAN     NA      NO      F       2014-1‚Ä¶ 2018-1‚Ä¶ A       #>  6 1558362566 AMY        TIERST‚Ä¶ M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  7 1558713628 ROBYN      NOHLING FNP-BC‚Ä¶ YES     F       2016-0‚Ä¶ 2018-0‚Ä¶ A       #>  8 1639173065 SAKSHI     DUA     M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #>  9 1639173065 SAKSHI     DUA     M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #> 10 1639173065 SAKSHI     DUA     M.D.    YES     F       2005-0‚Ä¶ 2019-0‚Ä¶ A       #> 11 1790786416 NOAH       GOLDMAN M.D.    NO      M       2005-0‚Ä¶ 2018-0‚Ä¶ A       #> 12 1962983775 NA         NA      NA      NA      NA      2018-0‚Ä¶ 2018-0‚Ä¶ A       #> # ‚Ä¶ with 16 more variables: basic_name <chr>, basic_name_prefix <chr>, #> #   basic_middle_name <chr>, basic_organization_name <chr>, #> #   basic_organizational_subpart <chr>, #> #   basic_authorized_official_credential <chr>, #> #   basic_authorized_official_first_name <chr>, #> #   basic_authorized_official_last_name <chr>, #> #   basic_authorized_official_middle_name <chr>, ‚Ä¶"},{"path":"/reference/npi_is_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if candidate NPI number is valid ‚Äî npi_is_valid","title":"Check if candidate NPI number is valid ‚Äî npi_is_valid","text":"Check whether number valid NPI number per specifications detailed Final Rule Standard Unique Health Identifier Health Care Providers (69 FR 3434).","code":""},{"path":"/reference/npi_is_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if candidate NPI number is valid ‚Äî npi_is_valid","text":"","code":"npi_is_valid(x)"},{"path":"/reference/npi_is_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if candidate NPI number is valid ‚Äî npi_is_valid","text":"x 10-digit candidate NPI number","code":""},{"path":"/reference/npi_is_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if candidate NPI number is valid ‚Äî npi_is_valid","text":"Boolean indicating whether npi valid","code":""},{"path":"/reference/npi_is_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if candidate NPI number is valid ‚Äî npi_is_valid","text":"","code":"npi_is_valid(1234567893) # TRUE #> [1] TRUE npi_is_valid(1234567898) # FALSE #> [1] FALSE"},{"path":"/reference/npi_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search the NPI Registry ‚Äî npi_search","title":"Search the NPI Registry ‚Äî npi_search","text":"Search U.S. National Provider Identifier (NPI) Registry using parameters exposed registry's API (Version 2.1). Results combined returned tibble S3 class npi_results. See Value description returned object.","code":""},{"path":"/reference/npi_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search the NPI Registry ‚Äî npi_search","text":"","code":"npi_search(   number = NULL,   enumeration_type = NULL,   taxonomy_description = NULL,   first_name = NULL,   last_name = NULL,   use_first_name_alias = NULL,   organization_name = NULL,   address_purpose = NULL,   city = NULL,   state = NULL,   postal_code = NULL,   country_code = NULL,   limit = 10L )"},{"path":"/reference/npi_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search the NPI Registry ‚Äî npi_search","text":"number (Optional) 10-digit NPI number assigned provider. enumeration_type (Optional) Type provider associated NPI, one : \"ind\" Individual provider (NPI-1) \"org\" Organizational provider (NPI-2) taxonomy_description (Optional) Scalar character vector taxonomy description code NUCC Healthcare Provider Taxonomy. first_name (Optional) field applies Individual Providers. Trailing wildcard entries permitted requiring least two characters entered (e.g. \"jo*\" ). field allows following special characters: ampersand, apostrophe, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. last_name (Optional) field applies Individual Providers. Trailing wildcard entries permitted requiring least two characters entered. field allows following special characters: ampersand, apostrophe, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. use_first_name_alias (Optional) field applies Individual Providers wildcard search. set \"True\", search results include Providers similar First Names. E.g., first_name=Robert, also return Providers first name Rob, Bob, Robbie, Bobby, etc. Valid Values : TRUE: include alias/similar names; FALSE: look exact matches. organization_name (Optional) field applies Organizational Providers. Trailing wildcard entries permitted requiring least two characters entered. field allows following special characters: ampersand, apostrophe, \"\" sign, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. Organization Name Organization Name fields associated NPI examined matching contents, therefore, results might contain organization name different one entered Organization Name criterion. address_purpose Refers whether address information entered pertains provider's Mailing Address provider's Practice Location Address. specified, results contain providers either Mailing Address Practice Location Addresses match entered address information. Primary search Primary Location Address. Secondary search Secondary Location Addresses. Valid values : \"location\", \"mailing\", \"primary\", \"secondary\". city City associated provider's address identified Address Purpose. search Military Address enter either APO FPO City field. field allows following special characters: ampersand, apostrophe, colon, comma, forward slash, hyphen, left right parentheses, period, pound sign, quotation mark, semi-colon. state State abbreviation associated provider's address identified Address Purpose. field used input criterion. field used, least one field, besides Enumeration Type Country, must populated. Valid values states: https://npiregistry.cms.hhs.gov/registry/API-State-Abbr postal_code Postal Code associated provider's address identified Address Purpose. enter 5 digit postal code, match appropriate 9 digit (zip+4) codes data. Trailing wildcard entries permitted requiring least two characters entered (e.g., \"21*\"). country_code Country associated provider's address identified Address Purpose. field can used input criterion long value selected US (United States). Valid values country codes: https://npiregistry.cms.hhs.gov/registry/API-Country-Abbr limit Maximum number records return, 1 1200 inclusive. default 10. API returns 200 records per request, values limit greater 200 result multiple API calls.","code":""},{"path":"/reference/npi_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search the NPI Registry ‚Äî npi_search","text":"Data frame (tibble) containing results search.","code":""},{"path":"/reference/npi_search.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Search the NPI Registry ‚Äî npi_search","text":"default, function requests 10 records, limit argument accepts values 1 API's limit 1200.","code":""},{"path":"/reference/npi_search.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Search the NPI Registry ‚Äî npi_search","text":"https://npiregistry.cms.hhs.gov/registry/help-api   Data dictionary fields returned NUCC Healthcare Provider Taxonomy","code":""},{"path":"/reference/npi_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search the NPI Registry ‚Äî npi_search","text":"","code":"if (FALSE) { # 10 NPI records for New York City npi_search(city = \"New York City\")  # 1O NPI records for New York City, organizations only npi_search(city = \"New York City\", enumeration_type = \"org\")  # 1O NPI records for New York City, individuals only npi_search(city = \"New York City\", enumeration_type = \"ind\")  # 1200 NPI records for New York City npi_search(city = \"New York City\", limit = 1200)  # Nutritionists in Maine npi_search(state = \"ME\", taxonomy_description = \"Nutritionist\")  # Record associated with NPI 1245251222 npi_search(number = 1245251222) }"},{"path":"/reference/npi_summarize.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 method to summarize an npi_results object ‚Äî npi_summarize","title":"S3 method to summarize an npi_results object ‚Äî npi_summarize","text":"S3 method summarize npi_results object","code":""},{"path":"/reference/npi_summarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 method to summarize an npi_results object ‚Äî npi_summarize","text":"","code":"npi_summarize(object, ...)"},{"path":"/reference/npi_summarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 method to summarize an npi_results object ‚Äî npi_summarize","text":"object npi_results S3 object ... Additional optional arguments","code":""},{"path":"/reference/npi_summarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 method to summarize an npi_results object ‚Äî npi_summarize","text":"Tibble containing following columns:  npi National Provider Identifier (NPI) number name Provider's first last name individual     providers, organization name organizational providers. enumeration_type Type provider associated NPI,       either \"Individual\" \"Organizational\" primary_practice_address Full address provider's       primary practice location phone Provider's telephone number primary_taxonomy Primary taxonomy description","code":""},{"path":"/reference/npi_summarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"S3 method to summarize an npi_results object ‚Äî npi_summarize","text":"","code":"data(npis) npi_summarize(npis) #> # A tibble: 10 √ó 6 #>           npi name                                 enume‚Ä¶¬π prima‚Ä¶¬≤ phone prima‚Ä¶¬≥ #>         <int> <chr>                                <chr>   <chr>   <chr> <chr>   #>  1 1194276360 ALYSSA COWNAN                        Indivi‚Ä¶ 5 E 98‚Ä¶ 212-‚Ä¶ Physic‚Ä¶ #>  2 1306849641 MARK MOHRMANN                        Indivi‚Ä¶ 16 PAR‚Ä¶ 212-‚Ä¶ Orthop‚Ä¶ #>  3 1639173065 SAKSHI DUA                           Indivi‚Ä¶ 10 E 1‚Ä¶ 212-‚Ä¶ Nurse ‚Ä¶ #>  4 1346604592 SARAH LOWRY                          Indivi‚Ä¶ 1335 D‚Ä¶ 614-‚Ä¶ Occupa‚Ä¶ #>  5 1558362566 AMY TIERSTEN                         Indivi‚Ä¶ 1176 5‚Ä¶ 212-‚Ä¶ Psychi‚Ä¶ #>  6 1790786416 NOAH GOLDMAN                         Indivi‚Ä¶ 140 BE‚Ä¶ 973-‚Ä¶ Intern‚Ä¶ #>  7 1558713628 ROBYN NOHLING                        Indivi‚Ä¶ 9 HOPE‚Ä¶ 781-‚Ä¶ Nurse ‚Ä¶ #>  8 1962983775 LENOX HILL MEDICAL ANESTHESIOLOGY, ‚Ä¶ Organi‚Ä¶ 100 E ‚Ä¶ 212-‚Ä¶ Intern‚Ä¶ #>  9 1427454529 YONGHONG TAN                         Indivi‚Ä¶ 34 MAP‚Ä¶ 203-‚Ä¶ Obstet‚Ä¶ #> 10 1326403213 RAJEE KRAUSE                         Indivi‚Ä¶ 12401 ‚Ä¶ 347-‚Ä¶ Nurse ‚Ä¶ #> # ‚Ä¶ with abbreviated variable names ¬π‚Äãenumeration_type, #> #   ¬≤‚Äãprimary_practice_address, ¬≥‚Äãprimary_taxonomy"},{"path":"/reference/npi_summarize.npi_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for npi_results S3 object ‚Äî npi_summarize.npi_results","title":"Summary method for npi_results S3 object ‚Äî npi_summarize.npi_results","text":"Print human-readable overview record return results call npi_search. format summary modeled one offered NPI registry website.","code":""},{"path":"/reference/npi_summarize.npi_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for npi_results S3 object ‚Äî npi_summarize.npi_results","text":"","code":"# S3 method for npi_results npi_summarize(object, ...)"},{"path":"/reference/npi_summarize.npi_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for npi_results S3 object ‚Äî npi_summarize.npi_results","text":"object npi_results S3 object ... Additional optional arguments","code":""},{"path":"/reference/npi_summarize.npi_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for npi_results S3 object ‚Äî npi_summarize.npi_results","text":"Tibble containing following columns:  npi National Provider Identifier (NPI) number name Provider's first last name individual     providers, organization name organizational providers. enumeration_type Type provider associated NPI,       either \"Individual\" \"Organizational\" primary_practice_address Full address provider's       primary practice location phone Provider's telephone number primary_taxonomy Primary taxonomy description","code":""},{"path":"/reference/npi_summarize.npi_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary method for npi_results S3 object ‚Äî npi_summarize.npi_results","text":"","code":"data(npis) npi_summarize(npis) #> # A tibble: 10 √ó 6 #>           npi name                                 enume‚Ä¶¬π prima‚Ä¶¬≤ phone prima‚Ä¶¬≥ #>         <int> <chr>                                <chr>   <chr>   <chr> <chr>   #>  1 1194276360 ALYSSA COWNAN                        Indivi‚Ä¶ 5 E 98‚Ä¶ 212-‚Ä¶ Physic‚Ä¶ #>  2 1306849641 MARK MOHRMANN                        Indivi‚Ä¶ 16 PAR‚Ä¶ 212-‚Ä¶ Orthop‚Ä¶ #>  3 1639173065 SAKSHI DUA                           Indivi‚Ä¶ 10 E 1‚Ä¶ 212-‚Ä¶ Nurse ‚Ä¶ #>  4 1346604592 SARAH LOWRY                          Indivi‚Ä¶ 1335 D‚Ä¶ 614-‚Ä¶ Occupa‚Ä¶ #>  5 1558362566 AMY TIERSTEN                         Indivi‚Ä¶ 1176 5‚Ä¶ 212-‚Ä¶ Psychi‚Ä¶ #>  6 1790786416 NOAH GOLDMAN                         Indivi‚Ä¶ 140 BE‚Ä¶ 973-‚Ä¶ Intern‚Ä¶ #>  7 1558713628 ROBYN NOHLING                        Indivi‚Ä¶ 9 HOPE‚Ä¶ 781-‚Ä¶ Nurse ‚Ä¶ #>  8 1962983775 LENOX HILL MEDICAL ANESTHESIOLOGY, ‚Ä¶ Organi‚Ä¶ 100 E ‚Ä¶ 212-‚Ä¶ Intern‚Ä¶ #>  9 1427454529 YONGHONG TAN                         Indivi‚Ä¶ 34 MAP‚Ä¶ 203-‚Ä¶ Obstet‚Ä¶ #> 10 1326403213 RAJEE KRAUSE                         Indivi‚Ä¶ 12401 ‚Ä¶ 347-‚Ä¶ Nurse ‚Ä¶ #> # ‚Ä¶ with abbreviated variable names ¬π‚Äãenumeration_type, #> #   ¬≤‚Äãprimary_practice_address, ¬≥‚Äãprimary_taxonomy"},{"path":"/reference/npis.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample results from the NPI Registry ‚Äî npis","title":"Sample results from the NPI Registry ‚Äî npis","text":"dataset containing 10 records returned NPI Registry search providers primary address New York City.","code":""},{"path":"/reference/npis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample results from the NPI Registry ‚Äî npis","text":"","code":"npis"},{"path":"/reference/npis.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample results from the NPI Registry ‚Äî npis","text":"tibble 10 rows 11 columns, organized follows: npi [integer] 10-digit National Provider Identifier number enumeration_type [character] Type provider NPI, either     \"Individual\" \"Organizational\". basic [list 1 tibble] Basic information provider. other_names [list tibbles] names provider     goes . identifiers [list tibbles] identifiers linked     NPI. taxonomies [list tibbles] Healthcare Provider Taxonomy     classification. addresses [list tibbles] Addresses provider's     primary practice location primary mailing address. practice_locations [list tibbles] Addresses     provider's practice locations. endpoints [list tibbles] Details provider's endpoints     health information exchange. created_date [datetime] Date NPI record first created (UTC). last_updated_date [datetime] UTC timestamp last time     NPI record updated.","code":""},{"path":"/reference/npis.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample results from the NPI Registry ‚Äî npis","text":"https://npiregistry.cms.hhs.gov/registry/help-api","code":""},{"path":"/reference/npis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample results from the NPI Registry ‚Äî npis","text":"search_npi(city = \"New York City\", limit = 10)","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"/reference/validate_npi_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate input as S3 npi_results object ‚Äî validate_npi_results","title":"Validate input as S3 npi_results object ‚Äî validate_npi_results","text":"Accepts object, x, determines whether meets criteria   S3 npi_results S3 object. criteria include tests   data types, column names, class attributes. intentionally   strict provide contract functions interact .","code":""},{"path":"/reference/validate_npi_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate input as S3 npi_results object ‚Äî validate_npi_results","text":"","code":"validate_npi_results(x, ...)"},{"path":[]},{"path":"/news/index.html","id":"npi-020","dir":"Changelog","previous_headings":"","what":"npi 0.2.0","title":"npi 0.2.0","text":"CRAN release: 2022-11-14","code":""},{"path":"/news/index.html","id":"minor-improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"npi 0.2.0","text":"npi_flatten() now covered unit tests (#15 #73). npi_search() provides informative error message internet endpoint unreachable (#52). npi_search() now checks legal use special characters prior submitting API request (#53). npi_search() now checks legal use wildcard characters prior submitting API request (#54). User agent default now includes installed package version (e.g., ‚Äúnpi/0.2.0‚Äù) (#55). checkmate package now Imports rather Suggests tests run (#57). npi_search() now test coverage case empty results returned (#59). npi_search() now provides message indicating many records requested (#72). npi_search() now handles epoch field conversion date format, fixing breaking API change. Thanks @trang-n reporting problem (#74) @parmsam submitting PR fixed (#75).","code":""},{"path":"/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"npi 0.2.0","text":"npi_summarize() now handles NPI records provider taxonomy records flagged non-primary (#51). User functions now backwards-compatible tidyr <= 0.8.99 (#56).","code":""},{"path":"/news/index.html","id":"documentation-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"npi 0.2.0","text":"Grouped reference index highlight important functions (#45). Added API URL DESCRIPTION file (#47). Clarified description npis dataset (#48). Added Advanced Use vignette (#49). Clarified API‚Äôs rate limitation (#50). Removed unused internal functions delay_by() remove_null() (#58). Acknowledged rOpenSci reviewers, Emily Zabore (#63) Mattias Greni√©, DESCRIPTION. Thanks! (#60) README now clarifies enumeration_type returned, provider_type (#64). README warns code results README may reproducible since reflect dynamic, stateful data (#65). Vignettes organize search arguments name instead description (#66). npi vignette details npi_summarize() (#67) npi_flatten() (#68) . REAMDE npi vignette provide use cases npi_is_valid() (#69). npi_search() documentation now links NPPES data dictionary help users understand API results (#70).","code":""},{"path":[]},{"path":"/news/index.html","id":"minor-improvements-0-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"npi 0.1.0 (2020-03-03)","text":"Added package website Added introductory vignette (#13) (#29) @parmsam Added example documentation exported function (#32) npi_is_valid() now uses checkLuhn package Luhn checking (#34) tidyr::unnest() now works old new versions tidyr","code":""},{"path":"/news/index.html","id":"documentation-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"npi 0.1.0 (2020-03-03)","text":"Updated redirected URLs new targets","code":""}]
